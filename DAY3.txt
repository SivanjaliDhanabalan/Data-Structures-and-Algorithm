1)Insert 777 at the beginning and insert 333 at position 4 and also deletion of an node by using positioning:

        class Node {
	    int data;  
	    Node next; 
	    
	    public Node(int data) {
	        this.data = data;
	        this.next = null; 
	    }
	}
	public class SinglyLinkedList {
	    Node head; 
	    public SinglyLinkedList() {
	        head = null; 
	    }
	    public void insertAtBeginning(int data) {
	        Node newNode = new Node(data);
	        newNode.next = head;  
	        head = newNode;  
	    }
	    public void insertAtPosition(int data, int position){
	        if (position == 1) {
	            insertAtBeginning(data);
	            return;
	        }

	        Node newNode = new Node(data);
	        Node current = head;
	        int count = 1;
	        while (current != null && count < position - 1) {
	            current = current.next;
	            count++;
	        }

	        if (current == null) {
	            System.out.println("The position is out of range.");
	            return;
	        }
	        newNode.next = current.next;
	        current.next = newNode;
	    }
	    public void deleteByValue(int value) {
	        if (head == null) {
	            System.out.println("List is empty.");
	            return;
	        }
	        if (head.data == value) {
	            head = head.next;
	            return;
	        }

	        Node current = head;
	        while (current.next != null && current.next.data != value) {
	            current = current.next;
	        }
	        if (current.next == null) {
	            System.out.println("Value not found.");
	            return;
	        }
	        current.next = current.next.next;
	    }
	    public void deleteByPosition(int position) {
	        if (head == null) {
	            System.out.println("List is empty.");
	            return;
	        }
	        if (position == 1) {
	            head = head.next;
	            return;
	        }

	        Node current = head;
	        for (int i = 1; current != null && i < position - 1; i++) {
	            current = current.next;
	        }

	        if (current == null || current.next == null) {
	            System.out.println("Position out of bounds.");
	            return;
	        }
	        current.next = current.next.next;
	   }
	    public void printList() {
	        Node current = head;
	        if (current == null) {
	            System.out.println("The list is empty.");
	            return;
	        }

	        while (current != null) {
	            System.out.print(current.data + " ");  
	            current = current.next;  
	        }
	        System.out.println();
	    }
	    public static void main(String[] args) {
	        SinglyLinkedList list = new SinglyLinkedList();
	        list.insertAtBeginning(10);
	        list.insertAtBeginning(20);
	        list.insertAtBeginning(30);
	        list.insertAtBeginning(40);
	        list.insertAtBeginning(50);
	        
	        System.out.println("Original List:");
	        list.printList();  
	     
	        list.insertAtBeginning(777);
	        System.out.println("Inserting 777 at the beginning:");
	        list.printList();  // Output: 777 50 40 30 20 10
	        
	        list.insertAtPosition(333, 4);
	        System.out.println("Inserting 333 at position 4:");
	        list.printList();  
	        
	        list.deleteByValue(30);
	        System.out.println("After deleting 30:");
	        list.printList();  

	        list.deleteByPosition(2);
	        System.out.println("Deleting it by position:");
	        list.printList();  

	    }
	}


2) Finding the middle element in the linked list:

class Node{
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class LinkedListMiddle {
    public static int findMiddle(Node head) {
        Node slow = head;
        Node fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow.data; 
    }
 
    public static void main(String[] args) {
      
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        System.out.println("Middle element: " + findMiddle(head));
    }
}

3)Reversing the linked List:

class Node {
	    int data;
	    Node next;

	    Node(int data) {
	        this.data = data;
	        this.next = null;
	    }
	}

	public class LinkedListReverse {
	    public static Node reverse(Node head) {
	        Node previous = null;  
	        Node current = head;   
	        Node nextNode = null;  

	        while (current != null) {
	            nextNode = current.next; 
	            current.next = previous; 
	            previous = current;      
	            current = nextNode;      
	        }

	        return previous; 
	    }

	    public static void printList(Node head) {
	        Node temp = head;
	        while (temp != null) {
	            System.out.print(temp.data + " ");
	            temp = temp.next;
	        }
	        System.out.println();
	    }

	    public static void main(String[] args) {
	        Node head = new Node(1);
	        head.next = new Node(2);
	        head.next.next = new Node(3);
	        head.next.next.next = new Node(4);
	        head.next.next.next.next = new Node(5);

	        System.out.println("Original linked list:");
	        printList(head);

	        head = reverse(head);

	        System.out.println("Reversed linked list:");
	        printList(head);
	    }
	}



